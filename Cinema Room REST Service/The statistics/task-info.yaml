type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    public class Seat {
        private final int price;
        private final int row;
        private final int column;
        private boolean available = true;

        public boolean isAvailable() {
            return available;
        }

        public int getPrice() {
            return price;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = (row <= 4) ? 10 : 8;
        }

        public synchronized boolean setAvailable(boolean value) {
            boolean isSuccessful = available != value;
            if (isSuccessful)
                available = value;
            return isSuccessful;
        }
    }
  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |
    package cinema.model;

    import cinema.dtos.PurchaseResponse;
    import cinema.dtos.SeatDto;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.UUID;
    import java.util.concurrent.ConcurrentHashMap;

    @Component
    public class Cinema {
        private final CinemaHall cinemaHall;
        private final Map<UUID, Seat> tokenToSeat = new ConcurrentHashMap<>();

        public Cinema(@Value("9") int totalRows, @Value("9") int totalColumns) {
            cinemaHall = new CinemaHall(totalRows, totalColumns);
        }

        public List<SeatDto> getAvailableSeatDtos() {
            List<SeatDto> availableSeats = new ArrayList<>();
            cinemaHall.ForEach(
                    (row, col) -> availableSeats.add( makeSeatDto( cinemaHall.getSeat(row, col) ) )
            );
            return availableSeats;
        }

        public boolean isSeatAvailable(int row, int col) {
            return cinemaHall.getSeat(row, col).isAvailable();
        }

        public int getTotalRows() {
            return cinemaHall.getTotalRows();
        }

        public int getTotalColumns() {
            return cinemaHall.getTotalColumns();
        }

        public PurchaseResponse purchase(int row, int column) {
            Seat seat = cinemaHall.getSeat(row, column);
            boolean isSuccessful = seat.setAvailable(false);
            if (!isSuccessful)
                return null;

            UUID newToken = UUID.randomUUID();
            tokenToSeat.put(newToken, seat);
            return new PurchaseResponse( newToken, makeSeatDto(seat) );
        }

        public boolean validate(int row, int col) {
            boolean isRowValid = 1 <= row && row <= getTotalRows();
            boolean isColumnValid = 1 <= col && col <= getTotalColumns();
            return  isRowValid && isColumnValid;
        }

        public SeatDto getSeatDto(int row, int column) {
            return makeSeatDto(cinemaHall.getSeat(row, column));
        }
        public SeatDto getSeatDtoByToken(UUID token) {
            return makeSeatDto(tokenToSeat.get(token));
        }

        public SeatDto makeSeatDto(Seat seat) {
            if (seat == null)
                return null;

            SeatDto seatDto = new SeatDto();
            seatDto.setRow(seat.getRow());
            seatDto.setColumn(seat.getColumn());
            seatDto.setPrice(seat.getPrice());
            return seatDto;
        }

        public SeatDto returnTicket(UUID token) {
            Seat seat = tokenToSeat.remove(token);
            if (seat == null) {
                return null;
            }
            seat.setAvailable(true);
            return makeSeatDto(seat);
        }
    }
  learner_created: true
- name: src/cinema/dtos/SeatCoordinatesDto.java
  visible: true
  text: |
    package cinema.dtos;

    public class SeatCoordinatesDto {
        private Integer row;
        private Integer column;

        public Integer getRow() {
            return row;
        }

        public void setRow(Integer row) {
            this.row = row;
        }

        public Integer getColumn() {
            return column;
        }

        public void setColumn(Integer column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/model/CinemaHall.java
  visible: true
  text: |
    package cinema.model;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.function.BiConsumer;

    public class CinemaHall {
        private final int totalRows;
        private final int totalColumns;
        private final List<Seat> seats;

        public CinemaHall(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.seats = initSeats(totalRows * totalColumns);
        }

        private List<Seat> initSeats(int totalSeats) {
            List<Seat> newSeats = new ArrayList<>(totalSeats);
            ForEach( (row, col) -> newSeats.add( new Seat(row, col) ) );
            return newSeats;
        }
        public void ForEach(BiConsumer<Integer, Integer> consumer) {
            for (int row = 1; row <= totalRows; row++) {
                for (int col = 1; col <= totalColumns; col++) {
                    consumer.accept(row, col);
                }
            }
        }
        private int flattenIndex(int row, int column) {
            return (row-1) * totalColumns + (column-1);
        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public Seat getSeat(int row, int col) {
            return seats.get( flattenIndex(row, col) );
        }
    }
  learner_created: true
- name: src/cinema/dtos/AvailableSeatsDto.java
  visible: true
  text: |
    package cinema.dtos;

    import cinema.model.Cinema;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.List;

    public class AvailableSeatsDto {
        private final int totalRows;
        private final int totalColumns;
        private final List<SeatDto> availableSeats;
        public AvailableSeatsDto(Cinema cinema) {
            this.totalRows = cinema.getTotalRows();
            this.totalColumns = cinema.getTotalColumns();
            availableSeats = cinema.getAvailableSeatDtos();
        }

        @JsonProperty("total_rows")
        public int getTotalRows() {
            return totalRows;
        }

        @JsonProperty("total_columns")
        public int getTotalColumns() {
            return totalColumns;
        }

        @JsonProperty("available_seats")
        public List<SeatDto> getAvailableSeats() {
            return availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/controllers/CinemaInfoController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.dtos.AvailableSeatsDto;
    import cinema.dtos.PurchaseResponse;
    import cinema.dtos.SeatCoordinatesDto;
    import cinema.dtos.SeatDto;
    import cinema.model.Cinema;
    import cinema.model.Seat;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.Map;
    import java.util.UUID;

    @RestController
    public class CinemaInfoController {
        @Autowired
        private Cinema cinema;

        @GetMapping("/seats")
        public AvailableSeatsDto getAvailableSeats() {
            return new AvailableSeatsDto(cinema);
        }

        @PostMapping("/purchase")
        public PurchaseResponse purchase(@RequestBody SeatCoordinatesDto seat) {
            int row = seat.getRow(), column = seat.getColumn();
            if ( !cinema.validate(row, column) )
                throw new ResponseStatusException(
                        HttpStatus.BAD_REQUEST,
                        "The number of a row or a column is out of bounds!"
                );
            PurchaseResponse purchaseResponse = cinema.purchase(row, column);
            if ( purchaseResponse == null )
                throw new ResponseStatusException(
                        HttpStatus.BAD_REQUEST,
                        "The ticket has been already purchased!"
                );

            return purchaseResponse;
        }

        @PostMapping("/return")
        public Map<String, SeatDto> returnTicket(@RequestBody Map<String, String> kwargs) {
            final String stringToken = kwargs.get("token");
            if (kwargs.size() != 1 || stringToken == null)
                throw new ResponseStatusException(
                        HttpStatus.BAD_REQUEST,
                        "Wrong request format!"
                );

            System.out.println(stringToken);
            UUID token = UUID.fromString(stringToken);
            SeatDto returnTicketSeatDto = cinema.returnTicket(token);
            if (returnTicketSeatDto == null)
                throw new ResponseStatusException(
                        HttpStatus.BAD_REQUEST,
                        "Wrong token!"
                );

            return Map.of("returned_ticket", returnTicketSeatDto);
        }
    }
  learner_created: true
- name: src/cinema/dtos/PurchaseResponse.java
  visible: true
  text: |
    package cinema.dtos;

    import java.util.UUID;

    public class PurchaseResponse {
        private final String token;
        private final SeatDto ticket;

        public String getToken() {
            return token;
        }

        public SeatDto getTicket() {
            return ticket;
        }

        public PurchaseResponse(UUID token, SeatDto ticket) {
            this.token = token.toString();
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/exceptionHandlers/DefaultAdvice.java
  visible: true
  text: |
    package cinema.exceptionHandlers;

    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.RestControllerAdvice;
    import org.springframework.web.server.ResponseStatusException;

    @RestControllerAdvice
    public class DefaultAdvice {
        static class ErrorMessage {
            private final String error;

            public ErrorMessage(String error) {
                this.error = error;
            }

            public String getError() {
                return error;
            }
        }

        @ExceptionHandler(ResponseStatusException.class)
        public ResponseEntity<ErrorMessage> returnOnlyReason(ResponseStatusException e) {
            return new ResponseEntity<>( new ErrorMessage( e.getReason() ), e.getStatus() );
        }
    }
  learner_created: true
- name: src/cinema/dtos/SeatDto.java
  visible: true
  text: |
    package cinema.dtos;

    public class SeatDto {
        private Integer row;
        private Integer column;
        private Integer price;

        public void setRow(Integer row) {
            this.row = row;
        }

        public void setColumn(Integer column) {
            this.column = column;
        }

        public void setPrice(Integer price) {
            this.price = price;
        }

        public Integer getRow() {
            return row;
        }

        public Integer getColumn() {
            return column;
        }

        public Integer getPrice() {
            return price;
        }

        public SeatDto() {

        }
    }
  learner_created: true
- name: src/cinema/dtos/CinemaStats.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 26 Sep 2021 08:59:30 UTC
record: -1
